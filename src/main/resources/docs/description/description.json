[
  {
    "patternId": "E1701",
    "title": "not-async-context-manager (E1701)",
    "description": "Async context manager '%s' doesn't implement __aenter__ and __aexit__.\nUsed when an async context manager is used with an object that does not\nimplement the async context management protocol. This message can't be emitted\nwhen using Python < 3.5."
  },
  {
    "patternId": "E1700",
    "title": "yield-inside-async-function (E1700)",
    "description": "Yield inside async function\nUsed when an yield or yield from statement is found inside an async\nfunction. This message can't be emitted when using Python < 3.5."
  },
  {
    "patternId": "E0103",
    "title": "not-in-loop (E0103)",
    "description": "%r not properly in loop\nUsed when break or continue keywords are used outside a loop."
  },
  {
    "patternId": "E0102",
    "title": "function-redefined (E0102)",
    "description": "%s already defined line %s\nUsed when a function / class / method is redefined."
  },
  {
    "patternId": "E0116",
    "title": "continue-in-finally (E0116)",
    "description": "'continue' not supported inside 'finally' clause\nEmitted when the continue keyword is found inside a finally clause, which is\na SyntaxError."
  },
  {
    "patternId": "E0110",
    "title": "abstract-class-instantiated (E0110)",
    "description": "Abstract class %r with abstract methods instantiated\nUsed when an abstract class with abc.ABCMeta as metaclass has abstract\nmethods and is instantiated."
  },
  {
    "patternId": "E0114",
    "title": "star-needs-assignment-target (E0114)",
    "description": "Can use starred expression only in assignment target\nEmitted when a star expression is not used in an assignment target."
  },
  {
    "patternId": "E0108",
    "title": "duplicate-argument-name (E0108)",
    "description": "Duplicate argument name %s in function definition\nDuplicate argument names in function definitions are syntax errors."
  },
  {
    "patternId": "E0101",
    "title": "return-in-init (E0101)",
    "description": "Explicit return in __init__\nUsed when the special class method __init__ has an explicit return value."
  },
  {
    "patternId": "E0112",
    "title": "too-many-star-expressions (E0112)",
    "description": "More than one starred expression in assignment\nEmitted when there are more than one starred expressions (*x) in an\nassignment. This is a SyntaxError."
  },
  {
    "patternId": "E0115",
    "title": "nonlocal-and-global (E0115)",
    "description": "Name %r is nonlocal and global\nEmitted when a name is both nonlocal and global."
  },
  {
    "patternId": "E0118",
    "title": "used-prior-global-declaration (E0118)",
    "description": "Name %r is used prior to global declaration\nEmitted when a name is used prior a global declaration, which results in an\nerror since Python 3.6. This message can't be emitted when using Python < 3.6."
  },
  {
    "patternId": "E0104",
    "title": "return-outside-function (E0104)",
    "description": "Return outside function\nUsed when a \"return\" statement is found outside a function or method."
  },
  {
    "patternId": "E0106",
    "title": "return-arg-in-generator (E0106)",
    "description": "Return with argument inside generator\nUsed when a \"return\" statement with an argument is found outside in a\ngenerator function or method (e.g. with some \"yield\" statements). This message\ncan't be emitted when using Python >= 3.3."
  },
  {
    "patternId": "E0113",
    "title": "invalid-star-assignment-target (E0113)",
    "description": "Starred assignment target must be in a list or tuple\nEmitted when a star expression is used as a starred assignment target."
  },
  {
    "patternId": "E0111",
    "title": "bad-reversed-sequence (E0111)",
    "description": "The first reversed() argument is not a sequence\nUsed when the first argument to reversed() builtin isn't a sequence (does not\nimplement __reversed__, nor __getitem__ and __len__"
  },
  {
    "patternId": "E0107",
    "title": "nonexistent-operator (E0107)",
    "description": "Use of the non-existent %s operator\nUsed when you attempt to use the C-style pre-increment or pre-decrement\noperator -- and ++, which doesn't exist in Python."
  },
  {
    "patternId": "E0105",
    "title": "yield-outside-function (E0105)",
    "description": "Yield outside function\nUsed when a \"yield\" statement is found outside a function or method."
  },
  {
    "patternId": "E0100",
    "title": "init-is-generator (E0100)",
    "description": "__init__ method is a generator\nUsed when the special class method __init__ is turned into a generator by a\nyield in its body."
  },
  {
    "patternId": "E0119",
    "title": "misplaced-format-function (E0119)",
    "description": "format function is not called on str\nEmitted when format function is not called on str object. e.g doing\nprint(\"value: {}\").format(123) instead of print(\"value: {}\".format(123)). This\nmight not be what the user intended to do."
  },
  {
    "patternId": "E0117",
    "title": "nonlocal-without-binding (E0117)",
    "description": "nonlocal name %s found without binding\nEmitted when a nonlocal variable does not have an attached name somewhere in\nthe parent scopes"
  },
  {
    "patternId": "W0150",
    "title": "lost-exception (W0150)",
    "description": "%s statement in finally block may swallow exception\nUsed when a break or a return statement is found inside the finally clause of\na try...finally block: the exceptions raised in the try clause will be\nsilently swallowed instead of being re-raised."
  },
  {
    "patternId": "W0199",
    "title": "assert-on-tuple (W0199)",
    "description": "Assert called on a 2-uple. Did you mean 'assert x,y'?\nA call of assert on a tuple will always evaluate to true if the tuple is not\nempty, and will always evaluate to false if it is."
  },
  {
    "patternId": "W0143",
    "title": "comparison-with-callable (W0143)",
    "description": "Comparing against a callable, did you omit the parenthesis?\nThis message is emitted when pylint detects that a comparison with a callable\nwas made, which might suggest that some parenthesis were omitted, resulting in\npotential unwanted behaviour."
  },
  {
    "patternId": "W0102",
    "title": "dangerous-default-value (W0102)",
    "description": "Dangerous default value %s as argument\nUsed when a mutable value as list or dictionary is detected in a default value\nfor an argument."
  },
  {
    "patternId": "W0109",
    "title": "duplicate-key (W0109)",
    "description": "Duplicate key %r in dictionary\nUsed when a dictionary expression binds the same key multiple times."
  },
  {
    "patternId": "W0120",
    "title": "useless-else-on-loop (W0120)",
    "description": "Else clause on loop without a break statement\nLoops should only have an else clause if they can exit early with a break\nstatement, otherwise the statements under else should be on the same scope as\nthe loop itself."
  },
  {
    "patternId": "W0106",
    "title": "expression-not-assigned (W0106)",
    "description": "Expression \"%s\" is assigned to nothing\nUsed when an expression that is not a function call is assigned to nothing.\nProbably something else was intended."
  },
  {
    "patternId": "W0124",
    "title": "confusing-with-statement (W0124)",
    "description": "Following \"as\" with another context manager looks like a tuple.\nEmitted when a with statement component returns multiple values and uses\nname binding with as only for a part of those values, as in with ctx() as a,\nb. This can be misleading, since it's not clear if the context manager returns\na tuple or if the node without a name binding is another context manager."
  },
  {
    "patternId": "W0108",
    "title": "unnecessary-lambda (W0108)",
    "description": "Lambda may not be necessary\nUsed when the body of a lambda expression is a function call on the same\nargument list as the lambda itself; such lambda expressions are in all but a\nfew cases replaceable with the function being called in the body of the\nlambda."
  },
  {
    "patternId": "W0111",
    "title": "assign-to-new-keyword (W0111)",
    "description": "Name %s will become a keyword in Python %s\nUsed when assignment will become invalid in future Python release due to\nintroducing new keyword."
  },
  {
    "patternId": "W0104",
    "title": "pointless-statement (W0104)",
    "description": "Statement seems to have no effect\nUsed when a statement doesn't have (or at least seems to) any effect."
  },
  {
    "patternId": "W0105",
    "title": "pointless-string-statement (W0105)",
    "description": "String statement has no effect\nUsed when a string is used as a statement (which of course has no effect).\nThis is a particular case of W0104 with its own message so you can easily\ndisable it if you're using those strings as documentation, instead of\ncomments."
  },
  {
    "patternId": "W0107",
    "title": "unnecessary-pass (W0107)",
    "description": "Unnecessary pass statement\nUsed when a \"pass\" statement that can be avoided is encountered."
  },
  {
    "patternId": "W0101",
    "title": "unreachable (W0101)",
    "description": "Unreachable code\nUsed when there is some code behind a \"return\" or \"raise\" statement, which\nwill never be accessed."
  },
  {
    "patternId": "W0123",
    "title": "eval-used (W0123)",
    "description": "Use of eval\nUsed when you use the \"eval\" function, to discourage its usage. Consider using\nast.literal_eval for safely evaluating strings containing Python expressions\nfrom untrusted sources."
  },
  {
    "patternId": "W0122",
    "title": "exec-used (W0122)",
    "description": "Use of exec\nUsed when you use the \"exec\" statement (function for Python 3), to discourage\nits usage. That doesn't mean you cannot use it !"
  },
  {
    "patternId": "W0125",
    "title": "using-constant-test (W0125)",
    "description": "Using a conditional statement with a constant value\nEmitted when a conditional statement (If or ternary if) uses a constant value\nfor its test. This might not be what the user intended to do."
  },
  {
    "patternId": "R0123",
    "title": "literal-comparison (R0123)",
    "description": "Comparison to literal\nUsed when comparing an object to a literal, which is usually what you do not\nwant to do, since you can compare to a different literal than what was\nexpected altogether."
  },
  {
    "patternId": "R0124",
    "title": "comparison-with-itself (R0124)",
    "description": "Redundant comparison - %s\nUsed when something is compared against itself."
  },
  {
    "patternId": "C0103",
    "title": "invalid-name (C0103)",
    "description": "%s name \"%s\" doesn't conform to %s\nUsed when the name doesn't conform to naming rules associated to its type\n(constant, variable, class...)."
  },
  {
    "patternId": "C0102",
    "title": "blacklisted-name (C0102)",
    "description": "Black listed name \"%s\"\nUsed when the name is listed in the black list (unauthorized names)."
  },
  {
    "patternId": "C0122",
    "title": "misplaced-comparison-constant (C0122)",
    "description": "Comparison should be %s\nUsed when the constant is placed on the left side of a comparison. It is\nusually clearer in intent to place it in the right hand side of the\ncomparison."
  },
  {
    "patternId": "C0121",
    "title": "singleton-comparison (C0121)",
    "description": "Comparison to %s should be %s\nUsed when an expression is compared to singleton values like True, False or\nNone."
  },
  {
    "patternId": "C0112",
    "title": "empty-docstring (C0112)",
    "description": "Empty %s docstring\nUsed when a module, function, class or method has an empty docstring (it would\nbe too easy ;)."
  },
  {
    "patternId": "C0111",
    "title": "missing-docstring (C0111)",
    "description": "Missing %s docstring\nUsed when a module, function, class or method has no docstring.Some special\nmethods like __init__ doesn't necessary require a docstring."
  },
  {
    "patternId": "C0123",
    "title": "unidiomatic-typecheck (C0123)",
    "description": "Using type() instead of isinstance() for a typecheck.\nThe idiomatic way to perform an explicit typecheck in Python is to use\nisinstance(x, Y) rather than type(x) == Y, type(x) is Y. Though there are\nunusual situations where these give different results."
  },
  {
    "patternId": "E0203",
    "title": "access-member-before-definition (E0203)",
    "description": "Access to member %r before its definition line %s\nUsed when an instance member is accessed before it's actually assigned."
  },
  {
    "patternId": "E0202",
    "title": "method-hidden (E0202)",
    "description": "An attribute defined in %s line %s hides this method\nUsed when a class defines a method which is hidden by an instance attribute\nfrom an ancestor class or set by some client code."
  },
  {
    "patternId": "E0237",
    "title": "assigning-non-slot (E0237)",
    "description": "Assigning to attribute %r not defined in class slots\nUsed when assigning to an attribute not defined in the class slots."
  },
  {
    "patternId": "E0241",
    "title": "duplicate-bases (E0241)",
    "description": "Duplicate bases for class %r\nUsed when a class has duplicate bases."
  },
  {
    "patternId": "E0240",
    "title": "inconsistent-mro (E0240)",
    "description": "Inconsistent method resolution order for class %r\nUsed when a class has an inconsistent method resolution order."
  },
  {
    "patternId": "E0239",
    "title": "inherit-non-class (E0239)",
    "description": "Inheriting %r, which is not a class.\nUsed when a class inherits from something which is not a class."
  },
  {
    "patternId": "E0238",
    "title": "invalid-slots (E0238)",
    "description": "Invalid __slots__ object\nUsed when an invalid __slots__ is found in class. Only a string, an iterable\nor a sequence is permitted."
  },
  {
    "patternId": "E0236",
    "title": "invalid-slots-object (E0236)",
    "description": "Invalid object %r in __slots__, must contain only non empty strings\nUsed when an invalid (non-string) object occurs in __slots__."
  },
  {
    "patternId": "E0211",
    "title": "no-method-argument (E0211)",
    "description": "Method has no argument\nUsed when a method which should have the bound instance as first argument has\nno argument defined."
  },
  {
    "patternId": "E0213",
    "title": "no-self-argument (E0213)",
    "description": "Method should have \"self\" as first argument\nUsed when a method has an attribute different the \"self\" as first argument.\nThis is considered as an error since this is a so common convention that you\nshouldn't break it!"
  },
  {
    "patternId": "E0302",
    "title": "unexpected-special-method-signature (E0302)",
    "description": "The special method %r expects %s param(s), %d %s given\nEmitted when a special method was defined with an invalid number of\nparameters. If it has too few or too many, it might not work at all."
  },
  {
    "patternId": "E0301",
    "title": "non-iterator-returned (E0301)",
    "description": "__iter__ returns non-iterator\nUsed when an __iter__ method returns something which is not an iterable (i.e.\nhas no __next__ method)"
  },
  {
    "patternId": "E0303",
    "title": "invalid-length-returned (E0303)",
    "description": "__len__ does not return non-negative integer\nUsed when a __len__ method returns something which is not a non-negative\ninteger"
  },
  {
    "patternId": "W0212",
    "title": "protected-access (W0212)",
    "description": "Access to a protected member %s of a client class\nUsed when a protected member (i.e. class member with a name beginning with an\nunderscore) is access outside the class or a descendant of the class where\nit's defined."
  },
  {
    "patternId": "W0201",
    "title": "attribute-defined-outside-init (W0201)",
    "description": "Attribute %r defined outside __init__\nUsed when an instance attribute is defined outside the __init__ method."
  },
  {
    "patternId": "W0232",
    "title": "no-init (W0232)",
    "description": "Class has no __init__ method\nUsed when a class has no __init__ method, neither its parent classes."
  },
  {
    "patternId": "W0223",
    "title": "abstract-method (W0223)",
    "description": "Method %r is abstract in class %r but is not overridden\nUsed when an abstract method (i.e. raise NotImplementedError) is not\noverridden in concrete class."
  },
  {
    "patternId": "W0221",
    "title": "arguments-differ (W0221)",
    "description": "Parameters differ from %s %r method\nUsed when a method has a different number of arguments than in the implemented\ninterface or in an overridden method."
  },
  {
    "patternId": "W0222",
    "title": "signature-differs (W0222)",
    "description": "Signature differs from %s %r method\nUsed when a method signature is different than in the implemented interface or\nin an overridden method."
  },
  {
    "patternId": "W0211",
    "title": "bad-staticmethod-argument (W0211)",
    "description": "Static method with %r as first argument\nUsed when a static method has \"self\" or a value specified in valid-\nclassmethod-first-arg option or valid-metaclass-classmethod-first-arg option\nas first argument."
  },
  {
    "patternId": "W0235",
    "title": "useless-super-delegation (W0235)",
    "description": "Useless super delegation in method %r\nUsed whenever we can detect that an overridden method is useless, relying on\nsuper() delegation to do the same thing as another method from the MRO."
  },
  {
    "patternId": "W0233",
    "title": "non-parent-init-called (W0233)",
    "description": "__init__ method from a non direct base class %r is called\nUsed when an __init__ method is called on a class which is not in the direct\nancestors for the analysed class."
  },
  {
    "patternId": "W0231",
    "title": "super-init-not-called (W0231)",
    "description": "__init__ method from base class %r is not called\nUsed when an ancestor class method has an __init__ method which is not called\nby a derived class."
  },
  {
    "patternId": "R0205",
    "title": "useless-object-inheritance (R0205)",
    "description": "Class %r inherits from object, can be safely removed from bases in python3\nUsed when a class inherit from object, which under python3 is implicit, hence\ncan be safely removed from bases."
  },
  {
    "patternId": "R0202",
    "title": "no-classmethod-decorator (R0202)",
    "description": "Consider using a decorator instead of calling classmethod\nUsed when a class method is defined without using the decorator syntax."
  },
  {
    "patternId": "R0203",
    "title": "no-staticmethod-decorator (R0203)",
    "description": "Consider using a decorator instead of calling staticmethod\nUsed when a static method is defined without using the decorator syntax."
  },
  {
    "patternId": "R0201",
    "title": "no-self-use (R0201)",
    "description": "Method could be a function\nUsed when a method doesn't use its bound instance, and so could be written as\na function."
  },
  {
    "patternId": "C0205",
    "title": "single-string-used-for-slots (C0205)",
    "description": "Class __slots__ should be a non-string iterable\nUsed when a class __slots__ is a simple string, rather than an iterable."
  },
  {
    "patternId": "C0202",
    "title": "bad-classmethod-argument (C0202)",
    "description": "Class method %s should have %s as first argument\nUsed when a class method has a first argument named differently than the value\nspecified in valid-classmethod-first-arg option (default to \"cls\"),\nrecommended to easily differentiate them from regular instance methods."
  },
  {
    "patternId": "C0204",
    "title": "bad-mcs-classmethod-argument (C0204)",
    "description": "Metaclass class method %s should have %s as first argument\nUsed when a metaclass class method has a first argument named differently than\nthe value specified in valid-metaclass-classmethod-first-arg option (default\nto \"mcs\"), recommended to easily differentiate them from regular instance\nmethods."
  },
  {
    "patternId": "C0203",
    "title": "bad-mcs-method-argument (C0203)",
    "description": "Metaclass method %s should have %s as first argument\nUsed when a metaclass method has a first argument named differently than the\nvalue specified in valid-classmethod-first-arg option (default to \"cls\"),\nrecommended to easily differentiate them from regular instance methods."
  },
  {
    "patternId": "F0202",
    "title": "method-check-failed (F0202)",
    "description": "Unable to check methods signature (%s / %s)\nUsed when Pylint has been unable to check methods signature compatibility for\nan unexpected reason. Please report this kind if you don't make sense of it."
  },
  {
    "patternId": "R0903",
    "title": "too-few-public-methods (R0903)",
    "description": "Too few public methods (%s/%s)\nUsed when class has too few public methods, so be sure it's really worth it."
  },
  {
    "patternId": "R0901",
    "title": "too-many-ancestors (R0901)",
    "description": "Too many ancestors (%s/%s)\nUsed when class has too many parent classes, try to reduce this to get a\nsimpler (and so easier to use) class."
  },
  {
    "patternId": "R0913",
    "title": "too-many-arguments (R0913)",
    "description": "Too many arguments (%s/%s)\nUsed when a function or method takes too many arguments."
  },
  {
    "patternId": "R0916",
    "title": "too-many-boolean-expressions (R0916)",
    "description": "Too many boolean expressions in if statement (%s/%s)\nUsed when an if statement contains too many boolean expressions."
  },
  {
    "patternId": "R0912",
    "title": "too-many-branches (R0912)",
    "description": "Too many branches (%s/%s)\nUsed when a function or method has too many branches, making it hard to\nfollow."
  },
  {
    "patternId": "R0902",
    "title": "too-many-instance-attributes (R0902)",
    "description": "Too many instance attributes (%s/%s)\nUsed when class has too many instance attributes, try to reduce this to get a\nsimpler (and so easier to use) class."
  },
  {
    "patternId": "R0914",
    "title": "too-many-locals (R0914)",
    "description": "Too many local variables (%s/%s)\nUsed when a function or method has too many local variables."
  },
  {
    "patternId": "R0904",
    "title": "too-many-public-methods (R0904)",
    "description": "Too many public methods (%s/%s)\nUsed when class has too many public methods, try to reduce this to get a\nsimpler (and so easier to use) class."
  },
  {
    "patternId": "R0911",
    "title": "too-many-return-statements (R0911)",
    "description": "Too many return statements (%s/%s)\nUsed when a function or method has too many return statement, making it hard\nto follow."
  },
  {
    "patternId": "R0915",
    "title": "too-many-statements (R0915)",
    "description": "Too many statements (%s/%s)\nUsed when a function or method has too many statements. You should then split\nit in smaller functions / methods."
  },
  {
    "patternId": "E0701",
    "title": "bad-except-order (E0701)",
    "description": "Bad except clauses order (%s)\nUsed when except clauses are not in the correct order (from the more specific\nto the more generic). If you don't fix the order, some exceptions may not be\ncaught by the most specific handler."
  },
  {
    "patternId": "E0712",
    "title": "catching-non-exception (E0712)",
    "description": "Catching an exception which doesn't inherit from Exception: %s\nUsed when a class which doesn't inherit from Exception is used as an exception\nin an except clause."
  },
  {
    "patternId": "E0703",
    "title": "bad-exception-context (E0703)",
    "description": "Exception context set to something which is not an exception, nor None\nUsed when using the syntax \"raise ... from ...\", where the exception context\nis not an exception, nor None."
  },
  {
    "patternId": "E0711",
    "title": "notimplemented-raised (E0711)",
    "description": "NotImplemented raised - should raise NotImplementedError\nUsed when NotImplemented is raised instead of NotImplementedError"
  },
  {
    "patternId": "E0702",
    "title": "raising-bad-type (E0702)",
    "description": "Raising %s while only classes or instances are allowed\nUsed when something which is neither a class, an instance or a string is\nraised (i.e. a TypeError will be raised)."
  },
  {
    "patternId": "E0710",
    "title": "raising-non-exception (E0710)",
    "description": "Raising a new style class which doesn't inherit from BaseException\nUsed when a new style class which doesn't inherit from BaseException is\nraised."
  },
  {
    "patternId": "E0704",
    "title": "misplaced-bare-raise (E0704)",
    "description": "The raise statement is not inside an except clause\nUsed when a bare raise is not used inside an except clause. This generates an\nerror, since there are no active exceptions to be reraised. An exception to\nthis rule is represented by a bare raise inside a finally clause, which might\nwork, as long as an exception is raised inside the try block, but it is\nnevertheless a code smell that must not be relied upon."
  },
  {
    "patternId": "W0705",
    "title": "duplicate-except (W0705)",
    "description": "Catching previously caught exception type %s\nUsed when an except catches a type that was already caught by a previous\nhandler."
  },
  {
    "patternId": "W0703",
    "title": "broad-except (W0703)",
    "description": "Catching too general exception %s\nUsed when an except catches a too general exception, possibly burying\nunrelated errors."
  },
  {
    "patternId": "W0715",
    "title": "raising-format-tuple (W0715)",
    "description": "Exception arguments suggest string formatting might be intended\nUsed when passing multiple arguments to an exception constructor, the first of\nthem a string literal containing what appears to be placeholders intended for\nformatting"
  },
  {
    "patternId": "W0711",
    "title": "binary-op-exception (W0711)",
    "description": "Exception to catch is the result of a binary \"%s\" operation\nUsed when the exception to catch is of the form \"except A or B:\". If intending\nto catch multiple, rewrite as \"except (A, B):\""
  },
  {
    "patternId": "W0716",
    "title": "wrong-exception-operation (W0716)",
    "description": "Invalid exception operation. %s\nUsed when an operation is done against an exception, but the operation is not\nvalid for the exception in question. Usually emitted when having binary\noperations between exceptions in except handlers."
  },
  {
    "patternId": "W0702",
    "title": "bare-except (W0702)",
    "description": "No exception type(s) specified\nUsed when an except clause doesn't specify exceptions type to catch."
  },
  {
    "patternId": "W0706",
    "title": "try-except-raise (W0706)",
    "description": "The except handler raises immediately\nUsed when an except handler uses raise as its first or only operator. This is\nuseless because it raises back the exception immediately. Remove the raise\noperator or the entire try-except-raise block!"
  },
  {
    "patternId": "W0311",
    "title": "bad-indentation (W0311)",
    "description": "Bad indentation. Found %s %s, expected %s\nUsed when an unexpected number of indentation's tabulations or spaces has been\nfound."
  },
  {
    "patternId": "W0312",
    "title": "mixed-indentation (W0312)",
    "description": "Found indentation with %ss instead of %ss\nUsed when there are some mixed tabs and spaces in a module."
  },
  {
    "patternId": "W0301",
    "title": "unnecessary-semicolon (W0301)",
    "description": "Unnecessary semicolon\nUsed when a statement is ended by a semi-colon (\";\"), which isn't necessary\n(that's python, not C ;)."
  },
  {
    "patternId": "C0326",
    "title": "bad-whitespace (C0326)",
    "description": "%s space %s %s %s\nUsed when a wrong number of spaces is used around an operator, bracket or\nblock opener."
  },
  {
    "patternId": "C0304",
    "title": "missing-final-newline (C0304)",
    "description": "Final newline missing\nUsed when the last line in a file is missing a newline."
  },
  {
    "patternId": "C0301",
    "title": "line-too-long (C0301)",
    "description": "Line too long (%s/%s)\nUsed when a line is longer than a given number of characters."
  },
  {
    "patternId": "C0327",
    "title": "mixed-line-endings (C0327)",
    "description": "Mixed line endings LF and CRLF\nUsed when there are mixed (LF and CRLF) newline signs in a file."
  },
  {
    "patternId": "C0321",
    "title": "multiple-statements (C0321)",
    "description": "More than one statement on a single line\nUsed when more than on statement are found on the same line."
  },
  {
    "patternId": "C0302",
    "title": "too-many-lines (C0302)",
    "description": "Too many lines in module (%s/%s)\nUsed when a module has too many lines, reducing its readability."
  },
  {
    "patternId": "C0305",
    "title": "trailing-newlines (C0305)",
    "description": "Trailing newlines\nUsed when there are trailing blank lines in a file."
  },
  {
    "patternId": "C0303",
    "title": "trailing-whitespace (C0303)",
    "description": "Trailing whitespace\nUsed when there is whitespace between the end of a line and the newline."
  },
  {
    "patternId": "C0328",
    "title": "unexpected-line-ending-format (C0328)",
    "description": "Unexpected line ending format. There is '%s' while it should be '%s'.\nUsed when there is different newline than expected."
  },
  {
    "patternId": "C0325",
    "title": "superfluous-parens (C0325)",
    "description": "Unnecessary parens after %r keyword\nUsed when a single item in parentheses follows an if, for, or other keyword."
  },
  {
    "patternId": "C0330",
    "title": "bad-continuation (C0330)",
    "description": "Wrong %s indentation%s%s.\nTODO"
  },
  {
    "patternId": "E0402",
    "title": "relative-beyond-top-level (E0402)",
    "description": "Attempted relative import beyond top-level package\nUsed when a relative import tries to access too many levels in the current\npackage."
  },
  {
    "patternId": "E0401",
    "title": "import-error (E0401)",
    "description": "Unable to import %s\nUsed when pylint has been unable to import a module."
  },
  {
    "patternId": "W0406",
    "title": "import-self (W0406)",
    "description": "Module import itself\nUsed when a module is importing itself."
  },
  {
    "patternId": "W0404",
    "title": "reimported (W0404)",
    "description": "Reimport %r (imported line %s)\nUsed when a module is reimported multiple times."
  },
  {
    "patternId": "W0403",
    "title": "relative-import (W0403)",
    "description": "Relative import %r, should be %r\nUsed when an import relative to the package directory is detected. This\nmessage can't be emitted when using Python >= 3.0."
  },
  {
    "patternId": "W0402",
    "title": "deprecated-module (W0402)",
    "description": "Uses of a deprecated module %r\nUsed a module marked as deprecated is imported."
  },
  {
    "patternId": "W0401",
    "title": "wildcard-import (W0401)",
    "description": "Wildcard import %s\nUsed when from module import * is detected."
  },
  {
    "patternId": "W0410",
    "title": "misplaced-future (W0410)",
    "description": "__future__ import is not the first non docstring statement\nPython 2.5 and greater require __future__ import to be the first non docstring\nstatement in the module."
  },
  {
    "patternId": "R0401",
    "title": "cyclic-import (R0401)",
    "description": "Cyclic import (%s)\nUsed when a cyclic import between two or more modules is detected."
  },
  {
    "patternId": "C0411",
    "title": "wrong-import-order (C0411)",
    "description": "%s should be placed before %s\nUsed when PEP8 import order is not respected (standard imports first, then\nthird-party libraries, then local imports)"
  },
  {
    "patternId": "C0413",
    "title": "wrong-import-position (C0413)",
    "description": "Import \"%s\" should be placed at the top of the module\nUsed when code and imports are mixed"
  },
  {
    "patternId": "C0414",
    "title": "useless-import-alias (C0414)",
    "description": "Import alias does not rename original package\nUsed when an import alias is same as original package.e.g using import numpy\nas numpy instead of import numpy as np"
  },
  {
    "patternId": "C0412",
    "title": "ungrouped-imports (C0412)",
    "description": "Imports from package %s are not grouped\nUsed when imports are not grouped by packages"
  },
  {
    "patternId": "C0410",
    "title": "multiple-imports (C0410)",
    "description": "Multiple imports on one line (%s)\nUsed when import statement importing multiple modules is detected."
  },
  {
    "patternId": "E1201",
    "title": "logging-format-truncated (E1201)",
    "description": "Logging format string ends in middle of conversion specifier\nUsed when a logging statement format string terminates before the end of a\nconversion specifier."
  },
  {
    "patternId": "E1206",
    "title": "logging-too-few-args (E1206)",
    "description": "Not enough arguments for logging format string\nUsed when a logging format string is given too few arguments."
  },
  {
    "patternId": "E1205",
    "title": "logging-too-many-args (E1205)",
    "description": "Too many arguments for logging format string\nUsed when a logging format string is given too many arguments."
  },
  {
    "patternId": "E1200",
    "title": "logging-unsupported-format (E1200)",
    "description": "Unsupported logging format character %r (%#02x) at index %d\nUsed when an unsupported format character is used in a logging statement\nformat string."
  },
  {
    "patternId": "W1201",
    "title": "logging-not-lazy (W1201)",
    "description": "Specify string format arguments as logging function parameters\nUsed when a logging statement has a call form of \"logging.<logging\nmethod>(format_string % (format_args...))\". Such calls should leave string\ninterpolation to the logging method itself and be written \"logging.<logging\nmethod>(format_string, format_args...)\" so that the program may avoid\nincurring the cost of the interpolation in those cases in which no message\nwill be logged. For more, see http://www.python.org/dev/peps/pep-0282/."
  },
  {
    "patternId": "W1202",
    "title": "logging-format-interpolation (W1202)",
    "description": "Use % formatting in logging functions and pass the % parameters as arguments\nUsed when a logging statement has a call form of \"logging.<logging\nmethod>(format_string.format(format_args...))\". Such calls should use %\nformatting instead, but leave interpolation to the logging function by passing\nthe parameters as arguments."
  },
  {
    "patternId": "W1203",
    "title": "logging-fstring-interpolation (W1203)",
    "description": "Use % formatting in logging functions and pass the % parameters as arguments\nUsed when a logging statement has a call form of \"logging.method(f\"...\"))\".\nSuch calls should use % formatting instead, but leave interpolation to the\nlogging function by passing the parameters as arguments."
  },
  {
    "patternId": "W0511",
    "title": "fixme (W0511)",
    "description": "Used when a warning note as FIXME or XXX is detected."
  },
  {
    "patternId": "W0512",
    "title": "invalid-encoded-data (W0512)",
    "description": "Cannot decode using encoding \"%s\", unexpected byte at position %d\nUsed when a source line cannot be decoded using the specified source file\nencoding. This message can't be emitted when using Python >= 3.0."
  },
  {
    "patternId": "I0023",
    "title": "use-symbolic-message-instead (I0023)",
    "description": "Used when a message is enabled or disabled by id."
  },
  {
    "patternId": "E1003",
    "title": "bad-super-call (E1003)",
    "description": "Bad first argument %r given to super()\nUsed when another argument than the current class is given as first argument\nof the super builtin."
  },
  {
    "patternId": "E1004",
    "title": "missing-super-argument (E1004)",
    "description": "Missing argument to super()\nUsed when the super builtin didn't receive an argument. This message can't be\nemitted when using Python >= 3.0."
  },
  {
    "patternId": "E1603",
    "title": "unpacking-in-except (E1603)",
    "description": "Implicit unpacking of exceptions is not supported in Python 3\nPython3 will not allow implicit unpacking of exceptions in except clauses. See\nhttp://www.python.org/dev/peps/pep-3110/"
  },
  {
    "patternId": "E1609",
    "title": "import-star-module-level (E1609)",
    "description": "Import * only allowed at module level\nUsed when the import star syntax is used somewhere else than the module level.\nThis message can't be emitted when using Python >= 3.0."
  },
  {
    "patternId": "E1610",
    "title": "non-ascii-bytes-literal (E1610)",
    "description": "Non-ascii bytes literals not supported in 3.x\nUsed when non-ascii bytes literals are found in a program. They are no longer\nsupported in Python 3. This message can't be emitted when using Python >= 3.0."
  },
  {
    "patternId": "E1602",
    "title": "parameter-unpacking (E1602)",
    "description": "Parameter unpacking specified\nUsed when parameter unpacking is specified for a function(Python 3 doesn't\nallow it)"
  },
  {
    "patternId": "E1606",
    "title": "long-suffix (E1606)",
    "description": "Use of long suffix\nUsed when \"l\" or \"L\" is used to mark a long integer. This will not work in\nPython 3, since int and long types have merged. This message can't be\nemitted when using Python >= 3.0."
  },
  {
    "patternId": "E1608",
    "title": "old-octal-literal (E1608)",
    "description": "Use of old octal literal\nUsed when encountering the old octal syntax, removed in Python 3. To use the\nnew syntax, prepend 0o on the number. This message can't be emitted when using\nPython >= 3.0."
  },
  {
    "patternId": "E1607",
    "title": "old-ne-operator (E1607)",
    "description": "Use of the <> operator\nUsed when the deprecated \"<>\" operator is used instead of \"!=\". This is\nremoved in Python 3. This message can't be emitted when using Python >= 3.0."
  },
  {
    "patternId": "E1605",
    "title": "backtick (E1605)",
    "description": "Use of the `` operator\nUsed when the deprecated \"``\" (backtick) operator is used instead of the str()\nfunction."
  },
  {
    "patternId": "E1604",
    "title": "old-raise-syntax (E1604)",
    "description": "Use raise ErrorClass(args) instead of raise ErrorClass, args.\nUsed when the alternate raise syntax 'raise foo, bar' is used instead of\n'raise foo(bar)'."
  },
  {
    "patternId": "E1601",
    "title": "print-statement (E1601)",
    "description": "print statement used\nUsed when a print statement is used (print is a function in Python 3)"
  },
  {
    "patternId": "W1652",
    "title": "deprecated-types-field (W1652)",
    "description": "Accessing a deprecated fields on the types module\nUsed when accessing a field on types that has been removed in Python 3."
  },
  {
    "patternId": "W1651",
    "title": "deprecated-itertools-function (W1651)",
    "description": "Accessing a deprecated function on the itertools module\nUsed when accessing a function on itertools that has been removed in Python 3."
  },
  {
    "patternId": "W1649",
    "title": "deprecated-string-function (W1649)",
    "description": "Accessing a deprecated function on the string module\nUsed when accessing a string function that has been deprecated in Python 3."
  },
  {
    "patternId": "W1657",
    "title": "deprecated-operator-function (W1657)",
    "description": "Accessing a removed attribute on the operator module\nUsed when accessing a field on operator module that has been removed in Python\n3."
  },
  {
    "patternId": "W1660",
    "title": "deprecated-sys-function (W1660)",
    "description": "Accessing a removed attribute on the sys module\nUsed when accessing a field on sys module that has been removed in Python 3."
  },
  {
    "patternId": "W1658",
    "title": "deprecated-urllib-function (W1658)",
    "description": "Accessing a removed attribute on the urllib module\nUsed when accessing a field on urllib module that has been removed or moved in\nPython 3."
  },
  {
    "patternId": "W1659",
    "title": "xreadlines-attribute (W1659)",
    "description": "Accessing a removed xreadlines attribute\nUsed when accessing the xreadlines() function on a file stream, removed in\nPython 3."
  },
  {
    "patternId": "W1623",
    "title": "metaclass-assignment (W1623)",
    "description": "Assigning to a class's __metaclass__ attribute\nUsed when a metaclass is specified by assigning to __metaclass__ (Python 3\nspecifies the metaclass as a class statement argument)"
  },
  {
    "patternId": "W1622",
    "title": "next-method-called (W1622)",
    "description": "Called a next() method on an object\nUsed when an object's next() method is called (Python 3 uses the next() built-\nin function)"
  },
  {
    "patternId": "W1620",
    "title": "dict-iter-method (W1620)",
    "description": "Calling a dict.iter*() method\nUsed for calls to dict.iterkeys(), itervalues() or iteritems() (Python 3 lacks\nthese methods)"
  },
  {
    "patternId": "W1621",
    "title": "dict-view-method (W1621)",
    "description": "Calling a dict.view*() method\nUsed for calls to dict.viewkeys(), viewvalues() or viewitems() (Python 3 lacks\nthese methods)"
  },
  {
    "patternId": "W1645",
    "title": "exception-message-attribute (W1645)",
    "description": "Exception.message removed in Python 3\nUsed when the message attribute is accessed on an Exception. Use\nstr(exception) instead."
  },
  {
    "patternId": "W1641",
    "title": "eq-without-hash (W1641)",
    "description": "Implementing __eq__ without also implementing __hash__\nUsed when a class implements __eq__ but not __hash__. In Python 2, objects get\nobject.__hash__ as the default implementation, in Python 3 objects get None as\ntheir default __hash__ implementation if they also implement __eq__."
  },
  {
    "patternId": "W1624",
    "title": "indexing-exception (W1624)",
    "description": "Indexing exceptions will not work on Python 3\nIndexing exceptions will not work on Python 3. Use exception.args[index]\ninstead."
  },
  {
    "patternId": "W1648",
    "title": "bad-python3-import (W1648)",
    "description": "Module moved in Python 3\nUsed when importing a module that no longer exists in Python 3."
  },
  {
    "patternId": "W1625",
    "title": "raising-string (W1625)",
    "description": "Raising a string exception\nUsed when a string exception is raised. This will not work on Python 3."
  },
  {
    "patternId": "W1611",
    "title": "standarderror-builtin (W1611)",
    "description": "StandardError built-in referenced\nUsed when the StandardError built-in function is referenced (missing from\nPython 3)"
  },
  {
    "patternId": "W1662",
    "title": "comprehension-escape (W1662)",
    "description": "Using a variable that was bound inside a comprehension\nEmitted when using a variable, that was bound in a comprehension handler,\noutside of the comprehension itself. On Python 3 these variables will be\ndeleted outside of the comprehension."
  },
  {
    "patternId": "W1661",
    "title": "exception-escape (W1661)",
    "description": "Using an exception object that was bound by an except handler\nEmitted when using an exception, that was bound in an except handler, outside\nof the except handler. On Python 3 these exceptions will be deleted once they\nget out of the except handler."
  },
  {
    "patternId": "W1650",
    "title": "deprecated-str-translate-call (W1650)",
    "description": "Using str.translate with deprecated deletechars parameters\nUsed when using the deprecated deletechars parameters from str.translate. Use\nre.sub to remove the desired characters"
  },
  {
    "patternId": "W1640",
    "title": "using-cmp-argument (W1640)",
    "description": "Using the cmp argument for list.sort / sorted\nUsing the cmp argument for list.sort or the sorted builtin should be avoided,\nsince it was removed in Python 3. Using either key or functools.cmp_to_key\nshould be preferred."
  },
  {
    "patternId": "W1630",
    "title": "cmp-method (W1630)",
    "description": "__cmp__ method defined\nUsed when a __cmp__ method is defined (method is not used by Python 3)"
  },
  {
    "patternId": "W1614",
    "title": "coerce-method (W1614)",
    "description": "__coerce__ method defined\nUsed when a __coerce__ method is defined (method is not used by Python 3)"
  },
  {
    "patternId": "W1615",
    "title": "delslice-method (W1615)",
    "description": "__delslice__ method defined\nUsed when a __delslice__ method is defined (method is not used by Python 3)"
  },
  {
    "patternId": "W1642",
    "title": "div-method (W1642)",
    "description": "__div__ method defined\nUsed when a __div__ method is defined. Using __truediv__ and setting__div__\n= __truediv__ should be preferred.(method is not used by Python 3)"
  },
  {
    "patternId": "W1616",
    "title": "getslice-method (W1616)",
    "description": "__getslice__ method defined\nUsed when a __getslice__ method is defined (method is not used by Python 3)"
  },
  {
    "patternId": "W1628",
    "title": "hex-method (W1628)",
    "description": "__hex__ method defined\nUsed when a __hex__ method is defined (method is not used by Python 3)"
  },
  {
    "patternId": "W1643",
    "title": "idiv-method (W1643)",
    "description": "__idiv__ method defined\nUsed when an __idiv__ method is defined. Using __itruediv__ and\nsetting__idiv__ = __itruediv__ should be preferred.(method is not used by\nPython 3)"
  },
  {
    "patternId": "W1629",
    "title": "nonzero-method (W1629)",
    "description": "__nonzero__ method defined\nUsed when a __nonzero__ method is defined (method is not used by Python 3)"
  },
  {
    "patternId": "W1627",
    "title": "oct-method (W1627)",
    "description": "__oct__ method defined\nUsed when an __oct__ method is defined (method is not used by Python 3)"
  },
  {
    "patternId": "W1644",
    "title": "rdiv-method (W1644)",
    "description": "__rdiv__ method defined\nUsed when a __rdiv__ method is defined. Using __rtruediv__ and\nsetting__rdiv__ = __rtruediv__ should be preferred.(method is not used by\nPython 3)"
  },
  {
    "patternId": "W1617",
    "title": "setslice-method (W1617)",
    "description": "__setslice__ method defined\nUsed when a __setslice__ method is defined (method is not used by Python 3)"
  },
  {
    "patternId": "W1601",
    "title": "apply-builtin (W1601)",
    "description": "apply built-in referenced\nUsed when the apply built-in function is referenced (missing from Python 3)"
  },
  {
    "patternId": "W1602",
    "title": "basestring-builtin (W1602)",
    "description": "basestring built-in referenced\nUsed when the basestring built-in function is referenced (missing from Python\n3)"
  },
  {
    "patternId": "W1603",
    "title": "buffer-builtin (W1603)",
    "description": "buffer built-in referenced\nUsed when the buffer built-in function is referenced (missing from Python 3)"
  },
  {
    "patternId": "W1604",
    "title": "cmp-builtin (W1604)",
    "description": "cmp built-in referenced\nUsed when the cmp built-in function is referenced (missing from Python 3)"
  },
  {
    "patternId": "W1605",
    "title": "coerce-builtin (W1605)",
    "description": "coerce built-in referenced\nUsed when the coerce built-in function is referenced (missing from Python 3)"
  },
  {
    "patternId": "W1654",
    "title": "dict-items-not-iterating (W1654)",
    "description": "dict.items referenced when not iterating\nUsed when dict.items is referenced in a non-iterating context (returns an\niterator in Python 3)"
  },
  {
    "patternId": "W1655",
    "title": "dict-keys-not-iterating (W1655)",
    "description": "dict.keys referenced when not iterating\nUsed when dict.keys is referenced in a non-iterating context (returns an\niterator in Python 3)"
  },
  {
    "patternId": "W1656",
    "title": "dict-values-not-iterating (W1656)",
    "description": "dict.values referenced when not iterating\nUsed when dict.values is referenced in a non-iterating context (returns an\niterator in Python 3)"
  },
  {
    "patternId": "W1619",
    "title": "old-division (W1619)",
    "description": "division w/o __future__ statement\nUsed for non-floor division w/o a float literal or from __future__ import\ndivision (Python 3 returns a float for int division unconditionally)"
  },
  {
    "patternId": "W1606",
    "title": "execfile-builtin (W1606)",
    "description": "execfile built-in referenced\nUsed when the execfile built-in function is referenced (missing from Python 3)"
  },
  {
    "patternId": "W1607",
    "title": "file-builtin (W1607)",
    "description": "file built-in referenced\nUsed when the file built-in function is referenced (missing from Python 3)"
  },
  {
    "patternId": "W1639",
    "title": "filter-builtin-not-iterating (W1639)",
    "description": "filter built-in referenced when not iterating\nUsed when the filter built-in is referenced in a non-iterating context\n(returns an iterator in Python 3)"
  },
  {
    "patternId": "W1618",
    "title": "no-absolute-import (W1618)",
    "description": "import missing `from __future__ import absolute_import`\nUsed when an import is not accompanied by from __future__ import\nabsolute_import (default behaviour in Python 3)"
  },
  {
    "patternId": "W1632",
    "title": "input-builtin (W1632)",
    "description": "input built-in referenced\nUsed when the input built-in is referenced (backwards-incompatible semantics\nin Python 3)"
  },
  {
    "patternId": "W1634",
    "title": "intern-builtin (W1634)",
    "description": "intern built-in referenced\nUsed when the intern built-in is referenced (Moved to sys.intern in Python 3)"
  },
  {
    "patternId": "W1608",
    "title": "long-builtin (W1608)",
    "description": "long built-in referenced\nUsed when the long built-in function is referenced (missing from Python 3)"
  },
  {
    "patternId": "W1636",
    "title": "map-builtin-not-iterating (W1636)",
    "description": "map built-in referenced when not iterating\nUsed when the map built-in is referenced in a non-iterating context (returns\nan iterator in Python 3)"
  },
  {
    "patternId": "W1653",
    "title": "next-method-defined (W1653)",
    "description": "next method defined\nUsed when a next method is defined that would be an iterator in Python 2 but\nis treated as a normal function in Python 3."
  },
  {
    "patternId": "W1646",
    "title": "invalid-str-codec (W1646)",
    "description": "non-text encoding used in str.decode\nUsed when using str.encode or str.decode with a non-text encoding. Use codecs\nmodule to handle arbitrary codecs."
  },
  {
    "patternId": "W1638",
    "title": "range-builtin-not-iterating (W1638)",
    "description": "range built-in referenced when not iterating\nUsed when the range built-in is referenced in a non-iterating context (returns\nan iterator in Python 3)"
  },
  {
    "patternId": "W1609",
    "title": "raw_input-builtin (W1609)",
    "description": "raw_input built-in referenced\nUsed when the raw_input built-in function is referenced (missing from Python\n3)"
  },
  {
    "patternId": "W1610",
    "title": "reduce-builtin (W1610)",
    "description": "reduce built-in referenced\nUsed when the reduce built-in function is referenced (missing from Python 3)"
  },
  {
    "patternId": "W1626",
    "title": "reload-builtin (W1626)",
    "description": "reload built-in referenced\nUsed when the reload built-in function is referenced (missing from Python 3).\nYou can use instead imp.reload or importlib.reload."
  },
  {
    "patternId": "W1633",
    "title": "round-builtin (W1633)",
    "description": "round built-in referenced\nUsed when the round built-in is referenced (backwards-incompatible semantics\nin Python 3)"
  },
  {
    "patternId": "W1647",
    "title": "sys-max-int (W1647)",
    "description": "sys.maxint removed in Python 3\nUsed when accessing sys.maxint. Use sys.maxsize instead."
  },
  {
    "patternId": "W1635",
    "title": "unichr-builtin (W1635)",
    "description": "unichr built-in referenced\nUsed when the unichr built-in is referenced (Use chr in Python 3)"
  },
  {
    "patternId": "W1612",
    "title": "unicode-builtin (W1612)",
    "description": "unicode built-in referenced\nUsed when the unicode built-in function is referenced (missing from Python 3)"
  },
  {
    "patternId": "W1613",
    "title": "xrange-builtin (W1613)",
    "description": "xrange built-in referenced\nUsed when the xrange built-in function is referenced (missing from Python 3)"
  },
  {
    "patternId": "W1637",
    "title": "zip-builtin-not-iterating (W1637)",
    "description": "zip built-in referenced when not iterating\nUsed when the zip built-in is referenced in a non-iterating context (returns\nan iterator in Python 3)"
  },
  {
    "patternId": "R1709",
    "title": "simplify-boolean-expression (R1709)",
    "description": "Boolean expression may be simplified to %s\nEmitted when redundant pre-python 2.5 ternary syntax is used."
  },
  {
    "patternId": "R1714",
    "title": "consider-using-in (R1714)",
    "description": "Consider merging these comparisons with \"in\" to %r\nTo check if a variable is equal to one of many values,combine the values into\na tuple and check if the variable is contained \"in\" it instead of checking for\nequality against each of the values.This is faster and less verbose."
  },
  {
    "patternId": "R1701",
    "title": "consider-merging-isinstance (R1701)",
    "description": "Consider merging these isinstance calls to isinstance(%s, (%s))\nUsed when multiple consecutive isinstance calls can be merged into one."
  },
  {
    "patternId": "R1717",
    "title": "consider-using-dict-comprehension (R1717)",
    "description": "Consider using a dictionary comprehension\nAlthough there is nothing syntactically wrong with this code, it is hard to\nread and can be simplified to a dict comprehension.Also it is faster since you\ndon't need to create another transient list"
  },
  {
    "patternId": "R1718",
    "title": "consider-using-set-comprehension (R1718)",
    "description": "Consider using a set comprehension\nAlthough there is nothing syntactically wrong with this code, it is hard to\nread and can be simplified to a set comprehension.Also it is faster since you\ndon't need to create another transient list"
  },
  {
    "patternId": "R1715",
    "title": "consider-using-get (R1715)",
    "description": "Consider using dict.get for getting values from a dict if a key is present or a default if not\nUsing the builtin dict.get for getting a value from a dictionary if a key is\npresent or a default if not, is simpler and considered more idiomatic,\nalthough sometimes a bit slower"
  },
  {
    "patternId": "R1713",
    "title": "consider-using-join (R1713)",
    "description": "Consider using str.join(sequence) for concatenating strings from an iterable\nUsing str.join(sequence) is faster, uses less memory and increases readability\ncompared to for-loop iteration."
  },
  {
    "patternId": "R1706",
    "title": "consider-using-ternary (R1706)",
    "description": "Consider using ternary (%s)\nUsed when one of known pre-python 2.5 ternary syntax is used."
  },
  {
    "patternId": "R1712",
    "title": "consider-swap-variables (R1712)",
    "description": "Consider using tuple unpacking for swapping variables\nYou do not have to use a temporary variable in order to swap variables. Using\n\"tuple unpacking\" to directly swap variables makes the intention more clear."
  },
  {
    "patternId": "R1707",
    "title": "trailing-comma-tuple (R1707)",
    "description": "Disallow trailing comma tuple\nIn Python, a tuple is actually created by the comma symbol, not by the\nparentheses. Unfortunately, one can actually create a tuple by misplacing a\ntrailing comma, which can lead to potential weird bugs in your code. You\nshould always use parentheses explicitly for creating a tuple."
  },
  {
    "patternId": "R1708",
    "title": "stop-iteration-return (R1708)",
    "description": "Do not raise StopIteration in generator, use return statement instead\nAccording to PEP479, the raise of StopIteration to end the loop of a generator\nmay lead to hard to find bugs. This PEP specify that raise StopIteration has\nto be replaced by a simple return statement"
  },
  {
    "patternId": "R1710",
    "title": "inconsistent-return-statements (R1710)",
    "description": "Either all return statements in a function should return an expression, or none of them should.\nAccording to PEP8, if any return statement returns an expression, any return\nstatements where no value is returned should explicitly state this as return\nNone, and an explicit return statement should be present at the end of the\nfunction (if reachable)"
  },
  {
    "patternId": "R1704",
    "title": "redefined-argument-from-local (R1704)",
    "description": "Redefining argument with the local name %r\nUsed when a local name is redefining an argument, which might suggest a\npotential error. This is taken in account only for a handful of name binding\noperations, such as for iteration, with statement assignment and exception\nhandler assignment."
  },
  {
    "patternId": "R1716",
    "title": "chained-comparison (R1716)",
    "description": "Simplify chained comparison between the operands\nThis message is emitted when pylint encounters boolean operation like\"a < b\nand b < c\", suggesting instead to refactor it to \"a < b < c\""
  },
  {
    "patternId": "R1719",
    "title": "simplifiable-if-expression (R1719)",
    "description": "The if expression can be replaced with %s\nUsed when an if expression can be replaced with 'bool(test)'."
  },
  {
    "patternId": "R1703",
    "title": "simplifiable-if-statement (R1703)",
    "description": "The if statement can be replaced with %s\nUsed when an if statement can be replaced with 'bool(test)'."
  },
  {
    "patternId": "R1702",
    "title": "too-many-nested-blocks (R1702)",
    "description": "Too many nested blocks (%s/%s)\nUsed when a function or a method has too many nested blocks. This makes the\ncode less understandable and maintainable."
  },
  {
    "patternId": "R1720",
    "title": "no-else-raise (R1720)",
    "description": "Unnecessary \"%s\" after \"raise\"\nUsed in order to highlight an unnecessary block of code following an if\ncontaining a raise statement. As such, it will warn when it encounters an else\nfollowing a chain of ifs, all of them containing a raise statement."
  },
  {
    "patternId": "R1705",
    "title": "no-else-return (R1705)",
    "description": "Unnecessary \"%s\" after \"return\"\nUsed in order to highlight an unnecessary block of code following an if\ncontaining a return statement. As such, it will warn when it encounters an\nelse following a chain of ifs, all of them containing a return statement."
  },
  {
    "patternId": "R1711",
    "title": "useless-return (R1711)",
    "description": "Useless return at end of function or method\nEmitted when a single \"return\" or \"return None\" statement is found at the end\nof function or method definition. This statement can safely be removed because\nPython will implicitly return None"
  },
  {
    "patternId": "C0113",
    "title": "unneeded-not (C0113)",
    "description": "Consider changing \"%s\" to \"%s\"\nUsed when a boolean expression contains an unneeded negation."
  },
  {
    "patternId": "C0201",
    "title": "consider-iterating-dictionary (C0201)",
    "description": "Consider iterating the dictionary directly instead of calling .keys()\nEmitted when the keys of a dictionary are iterated through the .keys() method.\nIt is enough to just iterate through the dictionary itself, as in \"for key in\ndictionary\"."
  },
  {
    "patternId": "C0200",
    "title": "consider-using-enumerate (C0200)",
    "description": "Consider using enumerate instead of iterating with range and len\nEmitted when code that iterates with range and len is encountered. Such code\ncan be simplified by using the enumerate builtin."
  },
  {
    "patternId": "C1801",
    "title": "len-as-condition (C1801)",
    "description": "Do not use `len(SEQUENCE)` to determine if a sequence is empty\nUsed when Pylint detects that len(sequence) is being used inside a condition\nto determine if a sequence is empty. Instead of comparing the length to 0,\nrely on the fact that empty sequences are false."
  },
  {
    "patternId": "R0801",
    "title": "duplicate-code (R0801)",
    "description": "Similar lines in %s files\nIndicates that a set of similar lines has been detected among multiple file.\nThis usually means that the code should be refactored to avoid this\nduplication."
  },
  {
    "patternId": "C0403",
    "title": "invalid-characters-in-docstring (C0403)",
    "description": "Invalid characters %r in a docstring\nUsed when a word in docstring cannot be checked by enchant."
  },
  {
    "patternId": "C0401",
    "title": "wrong-spelling-in-comment (C0401)",
    "description": "Wrong spelling of a word '%s' in a comment:\nUsed when a word in comment is not spelled correctly."
  },
  {
    "patternId": "C0402",
    "title": "wrong-spelling-in-docstring (C0402)",
    "description": "Wrong spelling of a word '%s' in a docstring:\nUsed when a word in docstring is not spelled correctly."
  },
  {
    "patternId": "E1507",
    "title": "invalid-envvar-value (E1507)",
    "description": "%s does not support %s type argument\nEnv manipulation functions support only string type arguments. See\nhttps://docs.python.org/3/library/os.html#os.getenv."
  },
  {
    "patternId": "W1501",
    "title": "bad-open-mode (W1501)",
    "description": "\"%s\" is not a valid mode for open.\nPython supports: r, w, a[, x] modes with b, +, and U (only with r) options.\nSee http://docs.python.org/2/library/functions.html#open"
  },
  {
    "patternId": "W1508",
    "title": "invalid-envvar-default (W1508)",
    "description": "%s default type is %s. Expected str or None.\nEnv manipulation functions return None or str values. Supplying anything\ndifferent as a default may cause bugs. See\nhttps://docs.python.org/3/library/os.html#os.getenv."
  },
  {
    "patternId": "W1503",
    "title": "redundant-unittest-assert (W1503)",
    "description": "Redundant use of %s with constant value %r\nThe first argument of assertTrue and assertFalse is a condition. If a constant\nis passed as parameter, that condition will be always true. In this case a\nwarning should be emitted."
  },
  {
    "patternId": "W1507",
    "title": "shallow-copy-environ (W1507)",
    "description": "Using copy.copy(os.environ). Use os.environ.copy() instead.\nos.environ is not a dict object but proxy object, so shallow copy has still\neffects on original object. See https://bugs.python.org/issue15373 for\nreference."
  },
  {
    "patternId": "W1502",
    "title": "boolean-datetime (W1502)",
    "description": "Using datetime.time in a boolean context.\nUsing datetime.time in a boolean context can hide subtle bugs when the time\nthey represent matches midnight UTC. This behaviour was fixed in Python 3.5.\nSee http://bugs.python.org/issue13936 for reference. This message can't be\nemitted when using Python >= 3.5."
  },
  {
    "patternId": "W1505",
    "title": "deprecated-method (W1505)",
    "description": "Using deprecated method %s()\nThe method is marked as deprecated and will be removed in a future version of\nPython. Consider looking for an alternative in the documentation."
  },
  {
    "patternId": "W1509",
    "title": "subprocess-popen-preexec-fn (W1509)",
    "description": "Using preexec_fn keyword which may be unsafe in the presence of threads\nThe preexec_fn parameter is not safe to use in the presence of threads in your\napplication. The child process could deadlock before exec is called. If you\nmust use it, keep it trivial! Minimize the number of libraries you call\ninto.https://docs.python.org/3/library/subprocess.html#popen-constructor"
  },
  {
    "patternId": "W1506",
    "title": "bad-thread-instantiation (W1506)",
    "description": "threading.Thread needs the target function\nThe warning is emitted when a threading.Thread class is instantiated without\nthe target function being passed. By default, the first parameter is the group\nparam, not the target param."
  },
  {
    "patternId": "E1307",
    "title": "bad-string-format-type (E1307)",
    "description": "Argument %r does not match format type %r\nUsed when a type required by format string is not suitable for actual argument\ntype"
  },
  {
    "patternId": "E1303",
    "title": "format-needs-mapping (E1303)",
    "description": "Expected mapping for format string, not %s\nUsed when a format string that uses named conversion specifiers is used with\nan argument that is not a mapping."
  },
  {
    "patternId": "E1301",
    "title": "truncated-format-string (E1301)",
    "description": "Format string ends in middle of conversion specifier\nUsed when a format string terminates before the end of a conversion specifier."
  },
  {
    "patternId": "E1304",
    "title": "missing-format-string-key (E1304)",
    "description": "Missing key %r in format string dictionary\nUsed when a format string that uses named conversion specifiers is used with a\ndictionary that doesn't contain all the keys required by the format string."
  },
  {
    "patternId": "E1302",
    "title": "mixed-format-string (E1302)",
    "description": "Mixing named and unnamed conversion specifiers in format string\nUsed when a format string contains both named (e.g. '%(foo)d') and unnamed\n(e.g. '%d') conversion specifiers. This is also used when a named conversion\nspecifier contains * for the minimum field width and/or precision."
  },
  {
    "patternId": "E1306",
    "title": "too-few-format-args (E1306)",
    "description": "Not enough arguments for format string\nUsed when a format string that uses unnamed conversion specifiers is given too\nfew arguments"
  },
  {
    "patternId": "E1310",
    "title": "bad-str-strip-call (E1310)",
    "description": "Suspicious argument in %s.%s call\nThe argument to a str.{l,r,}strip call contains a duplicate character,"
  },
  {
    "patternId": "E1305",
    "title": "too-many-format-args (E1305)",
    "description": "Too many arguments for format string\nUsed when a format string that uses unnamed conversion specifiers is given too\nmany arguments."
  },
  {
    "patternId": "E1300",
    "title": "bad-format-character (E1300)",
    "description": "Unsupported format character %r (%#02x) at index %d\nUsed when an unsupported format character is used in a format string."
  },
  {
    "patternId": "W1402",
    "title": "anomalous-unicode-escape-in-string (W1402)",
    "description": "Anomalous Unicode escape in byte string: '%s'. String constant might be missing an r or u prefix.\nUsed when an escape like u is encountered in a byte string where it has no\neffect."
  },
  {
    "patternId": "W1401",
    "title": "anomalous-backslash-in-string (W1401)",
    "description": "Anomalous backslash in string: '%s'. String constant might be missing an r prefix.\nUsed when a backslash is in a literal string but not as an escape."
  },
  {
    "patternId": "W1308",
    "title": "duplicate-string-formatting-argument (W1308)",
    "description": "Duplicate string formatting argument %r, consider passing as named argument\nUsed when we detect that a string formatting is repeating an argument instead\nof using named string arguments"
  },
  {
    "patternId": "W1305",
    "title": "format-combined-specification (W1305)",
    "description": "Format string contains both automatic field numbering and manual field specification\nUsed when a PEP 3101 format string contains both automatic field numbering\n(e.g. '{}') and manual field specification (e.g. '{0}')."
  },
  {
    "patternId": "W1300",
    "title": "bad-format-string-key (W1300)",
    "description": "Format string dictionary key should be a string, not %s\nUsed when a format string that uses named conversion specifiers is used with a\ndictionary whose keys are not all strings."
  },
  {
    "patternId": "W1403",
    "title": "implicit-str-concat-in-sequence (W1403)",
    "description": "Implicit string concatenation found in %s\nString literals are implicitly concatenated in a literal iterable definition :\nmaybe a comma is missing ?"
  },
  {
    "patternId": "W1302",
    "title": "bad-format-string (W1302)",
    "description": "Invalid format string\nUsed when a PEP 3101 format string is invalid."
  },
  {
    "patternId": "W1306",
    "title": "missing-format-attribute (W1306)",
    "description": "Missing format attribute %r in format specifier %r\nUsed when a PEP 3101 format string uses an attribute specifier ({0.length}),\nbut the argument passed for formatting doesn't have that attribute."
  },
  {
    "patternId": "W1303",
    "title": "missing-format-argument-key (W1303)",
    "description": "Missing keyword argument %r for format string\nUsed when a PEP 3101 format string that uses named fields doesn't receive one\nor more required keywords."
  },
  {
    "patternId": "W1304",
    "title": "unused-format-string-argument (W1304)",
    "description": "Unused format argument %r\nUsed when a PEP 3101 format string that uses named fields is used with an\nargument that is not required by the format string."
  },
  {
    "patternId": "W1301",
    "title": "unused-format-string-key (W1301)",
    "description": "Unused key %r in format string dictionary\nUsed when a format string that uses named conversion specifiers is used with a\ndictionary that contains keys not required by the format string."
  },
  {
    "patternId": "W1307",
    "title": "invalid-format-index (W1307)",
    "description": "Using invalid lookup key %r in format specifier %r\nUsed when a PEP 3101 format string uses a lookup specifier ({a[1]}), but the\nargument passed for formatting doesn't contain or doesn't have that key as an\nattribute."
  },
  {
    "patternId": "E1137",
    "title": "unsupported-assignment-operation (E1137)",
    "description": "%r does not support item assignment\nEmitted when an object does not support item assignment (i.e. doesn't define\n__setitem__ method)."
  },
  {
    "patternId": "E1138",
    "title": "unsupported-delete-operation (E1138)",
    "description": "%r does not support item deletion\nEmitted when an object does not support item deletion (i.e. doesn't define\n__delitem__ method)."
  },
  {
    "patternId": "E1130",
    "title": "invalid-unary-operand-type (E1130)",
    "description": "Emitted when a unary operand is used on an object which does not support this\ntype of operation."
  },
  {
    "patternId": "E1131",
    "title": "unsupported-binary-operation (E1131)",
    "description": "Emitted when a binary arithmetic operation between two operands is not\nsupported."
  },
  {
    "patternId": "E1101",
    "title": "no-member (E1101)",
    "description": "%s %r has no %r member%s\nUsed when a variable is accessed for an unexistent member."
  },
  {
    "patternId": "E1102",
    "title": "not-callable (E1102)",
    "description": "%s is not callable\nUsed when an object being called has been inferred to a non callable object."
  },
  {
    "patternId": "E1124",
    "title": "redundant-keyword-arg (E1124)",
    "description": "Argument %r passed by position and keyword in %s call\nUsed when a function call would result in assigning multiple values to a\nfunction parameter, one value from a positional argument and one from a\nkeyword argument."
  },
  {
    "patternId": "E1111",
    "title": "assignment-from-no-return (E1111)",
    "description": "Assigning result of a function call, where the function has no return\nUsed when an assignment is done on a function call but the inferred function\ndoesn't return anything."
  },
  {
    "patternId": "E1128",
    "title": "assignment-from-none (E1128)",
    "description": "Assigning result of a function call, where the function returns None\nUsed when an assignment is done on a function call but the inferred function\nreturns nothing but None."
  },
  {
    "patternId": "E1129",
    "title": "not-context-manager (E1129)",
    "description": "Context manager '%s' doesn't implement __enter__ and __exit__.\nUsed when an instance in a with statement doesn't implement the context\nmanager protocol(__enter__/__exit__)."
  },
  {
    "patternId": "E1140",
    "title": "unhashable-dict-key (E1140)",
    "description": "Dict key is unhashable\nEmitted when a dict key is not hashable (i.e. doesn't define __hash__ method)."
  },
  {
    "patternId": "E1132",
    "title": "repeated-keyword (E1132)",
    "description": "Got multiple values for keyword argument %r in function call\nEmitted when a function call got multiple values for a keyword."
  },
  {
    "patternId": "E1139",
    "title": "invalid-metaclass (E1139)",
    "description": "Invalid metaclass %r used\nEmitted whenever we can detect that a class is using, as a metaclass,\nsomething which might be invalid for using as a metaclass."
  },
  {
    "patternId": "E1125",
    "title": "missing-kwoa (E1125)",
    "description": "Missing mandatory keyword argument %r in %s call\nUsed when a function call does not pass a mandatory keyword-only argument."
  },
  {
    "patternId": "E1120",
    "title": "no-value-for-parameter (E1120)",
    "description": "No value for argument %s in %s call\nUsed when a function call passes too few arguments."
  },
  {
    "patternId": "E1133",
    "title": "not-an-iterable (E1133)",
    "description": "Non-iterable value %s is used in an iterating context\nUsed when a non-iterable value is used in place where iterable is expected"
  },
  {
    "patternId": "E1134",
    "title": "not-a-mapping (E1134)",
    "description": "Non-mapping value %s is used in a mapping context\nUsed when a non-mapping value is used in place where mapping is expected"
  },
  {
    "patternId": "E1126",
    "title": "invalid-sequence-index (E1126)",
    "description": "Sequence index is not an int, slice, or instance with __index__\nUsed when a sequence type is indexed with an invalid type. Valid types are\nints, slices, and objects with an __index__ method."
  },
  {
    "patternId": "E1127",
    "title": "invalid-slice-index (E1127)",
    "description": "Slice index is not an int, None, or instance with __index__\nUsed when a slice index is not an integer, None, or an object with an\n__index__ method."
  },
  {
    "patternId": "E1121",
    "title": "too-many-function-args (E1121)",
    "description": "Too many positional arguments for %s call\nUsed when a function call passes too many positional arguments."
  },
  {
    "patternId": "E1123",
    "title": "unexpected-keyword-arg (E1123)",
    "description": "Unexpected keyword argument %r in %s call\nUsed when a function call passes a keyword argument that doesn't correspond to\none of the function's parameter names."
  },
  {
    "patternId": "E1135",
    "title": "unsupported-membership-test (E1135)",
    "description": "Value '%s' doesn't support membership test\nEmitted when an instance in membership test expression doesn't implement\nmembership protocol (__contains__/__iter__/__getitem__)."
  },
  {
    "patternId": "E1136",
    "title": "unsubscriptable-object (E1136)",
    "description": "Value '%s' is unsubscriptable\nEmitted when a subscripted value doesn't support subscription (i.e. doesn't\ndefine __getitem__ method or __class_getitem__ for a class)."
  },
  {
    "patternId": "W1113",
    "title": "keyword-arg-before-vararg (W1113)",
    "description": "Keyword argument before variable positional arguments list in the definition of %s function\nWhen defining a keyword argument before variable positional arguments, one can\nend up in having multiple values passed for the aforementioned parameter in\ncase the method is called with keyword arguments."
  },
  {
    "patternId": "I1101",
    "title": "c-extension-no-member (I1101)",
    "description": "%s %r has no %r member%s, but source is unavailable. Consider adding this module to extension-pkg-whitelist if you want to perform analysis based on run-time introspection of living objects.\nUsed when a variable is accessed for non-existent member of C extension. Due\nto unavailability of source static analysis is impossible, but it may be\nperformed by introspecting living objects in run-time."
  },
  {
    "patternId": "E0633",
    "title": "unpacking-non-sequence (E0633)",
    "description": "Attempting to unpack a non-sequence%s\nUsed when something which is not a sequence is used in an unpack assignment"
  },
  {
    "patternId": "E0604",
    "title": "invalid-all-object (E0604)",
    "description": "Invalid object %r in __all__, must contain only strings\nUsed when an invalid (non-string) object occurs in __all__."
  },
  {
    "patternId": "E0611",
    "title": "no-name-in-module (E0611)",
    "description": "No name %r in module %r\nUsed when a name cannot be found in a module."
  },
  {
    "patternId": "E0602",
    "title": "undefined-variable (E0602)",
    "description": "Undefined variable %r\nUsed when an undefined variable is accessed."
  },
  {
    "patternId": "E0603",
    "title": "undefined-all-variable (E0603)",
    "description": "Undefined variable name %r in __all__\nUsed when an undefined variable name is referenced in __all__."
  },
  {
    "patternId": "E0601",
    "title": "used-before-assignment (E0601)",
    "description": "Using variable %r before assignment\nUsed when a local variable is accessed before its assignment."
  },
  {
    "patternId": "W0640",
    "title": "cell-var-from-loop (W0640)",
    "description": "Cell variable %s defined in loop\nA variable used in a closure is defined in a loop. This will result in all\nclosures using the same value for the closed-over variable."
  },
  {
    "patternId": "W0601",
    "title": "global-variable-undefined (W0601)",
    "description": "Global variable %r undefined at the module level\nUsed when a variable is defined through the \"global\" statement but the\nvariable is not defined in the module scope."
  },
  {
    "patternId": "W0642",
    "title": "self-cls-assignment (W0642)",
    "description": "Invalid assignment to %s in method\nInvalid assignment to self or cls in instance or class method respectively."
  },
  {
    "patternId": "W0632",
    "title": "unbalanced-tuple-unpacking (W0632)",
    "description": "Possible unbalanced tuple unpacking with sequence%s: left side has %d label(s), right side has %d value(s)\nUsed when there is an unbalanced tuple unpacking in assignment"
  },
  {
    "patternId": "W0641",
    "title": "possibly-unused-variable (W0641)",
    "description": "Possibly unused variable %r\nUsed when a variable is defined but might not be used. The possibility comes\nfrom the fact that locals() might be used, which could consume or not the said\nvariable"
  },
  {
    "patternId": "W0622",
    "title": "redefined-builtin (W0622)",
    "description": "Redefining built-in %r\nUsed when a variable or function override a built-in."
  },
  {
    "patternId": "W0623",
    "title": "redefine-in-handler (W0623)",
    "description": "Redefining name %r from %s in exception handler\nUsed when an exception handler assigns the exception to an existing name"
  },
  {
    "patternId": "W0621",
    "title": "redefined-outer-name (W0621)",
    "description": "Redefining name %r from outer scope (line %s)\nUsed when a variable's name hides a name defined in the outer scope."
  },
  {
    "patternId": "W0611",
    "title": "unused-import (W0611)",
    "description": "Unused %s\nUsed when an imported module or variable is not used."
  },
  {
    "patternId": "W0613",
    "title": "unused-argument (W0613)",
    "description": "Unused argument %r\nUsed when a function or method argument is not used."
  },
  {
    "patternId": "W0614",
    "title": "unused-wildcard-import (W0614)",
    "description": "Unused import %s from wildcard import\nUsed when an imported module or variable is not used from a 'from X import\n*' style import."
  },
  {
    "patternId": "W0612",
    "title": "unused-variable (W0612)",
    "description": "Unused variable %r\nUsed when a variable is defined but not used."
  },
  {
    "patternId": "W0602",
    "title": "global-variable-not-assigned (W0602)",
    "description": "Using global for %r but no assignment is done\nUsed when a variable is defined through the \"global\" statement but no\nassignment to this variable is done."
  },
  {
    "patternId": "W0631",
    "title": "undefined-loop-variable (W0631)",
    "description": "Using possibly undefined loop variable %r\nUsed when a loop variable (i.e. defined by a for loop or a list comprehension\nor a generator expression) is used outside the loop."
  },
  {
    "patternId": "W0603",
    "title": "global-statement (W0603)",
    "description": "Using the global statement\nUsed when you use the \"global\" statement to update a global variable. Pylint\njust try to discourage this usage. That doesn't mean you cannot use it !"
  },
  {
    "patternId": "W0604",
    "title": "global-at-module-level (W0604)",
    "description": "Using the global statement at the module level\nUsed when you use the \"global\" statement at the module level since it has no\neffect"
  }
]
